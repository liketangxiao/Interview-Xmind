<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="49bbs0rg4mqtberom33k48v8pr" modified-by="jimmy" theme="61u3tl6u8bltit1sc5v3a47bvf" timestamp="1532412234181" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="1vgtdfmnlvv28vail4nm0n6klr" modified-by="jimmy" structure-class="org.xmind.ui.logic.right" timestamp="1532410993052"><title>虚拟机</title><children><topics type="attached"><topic id="7r5klb7vsqqon1mq2rk7o0bag4" modified-by="SYSTEM" timestamp="1531105595392"><title>数据区域</title><children><topics type="attached"><topic id="3qql7q9c475f2pm9gdn4vk0qct" modified-by="jimmy" timestamp="1532410193574"><title>程序计数器</title><children><topics type="attached"><topic id="30vnt1ufhrcv92rcriapqnf7lp" modified-by="jimmy" timestamp="1532410204411"><title>记录执行程序字节码的地址</title></topic></topics></children></topic><topic id="6e6dgeuidl7tu1dp75h16pv4ph" modified-by="jimmy" timestamp="1532410221718"><title>虚拟机栈</title><children><topics type="attached"><topic id="52r540odlkisfooj0jjifa3gi5" modified-by="jimmy" timestamp="1532410268336"><title>方法执行创建,存储局部变量,操作数栈,常量池引用</title></topic></topics></children></topic><topic id="2jeohp6m1uhl28is46ggk9bchl" modified-by="jimmy" timestamp="1532410286043"><title>本地方法栈</title><children><topics type="attached"><topic id="3vjcsk8d29u696aua9ubsfqmdh" modified-by="jimmy" timestamp="1532410294710"><title>为本地方法服务</title></topic></topics></children></topic><topic id="3gbgp35gulojtkdp4s5pdvoutd" modified-by="jimmy" timestamp="1532410401663"><title>堆</title><children><topics type="attached"><topic id="7bnjnmu5k91urdkfbqr3sl8dn7" modified-by="jimmy" timestamp="1532410346076"><title>为对象分配内存,GC工作的主要区域</title></topic><topic id="2tt4lj2nfcaujuupba5fr6p4ks" modified-by="jimmy" timestamp="1532410422294"><title>新生代</title><children><topics type="attached"><topic id="6mkfmn5c3krgac0o3srb8u3k35" modified-by="jimmy" timestamp="1532410488982"><title svg:width="500">新对象再Eden区, 回收存活到从From Survivor 到To Survivor</title></topic></topics></children></topic><topic id="05ksgbv57b66mbkd5g6esdponr" modified-by="jimmy" timestamp="1532410401280"><title>老年代</title></topic><topic id="0lktk59j4ec4054g3po34ikafi" modified-by="jimmy" timestamp="1532410404426"><title>永久代</title></topic></topics></children></topic><topic id="7lk3olqu8m28f12stb3qv3f5ve" modified-by="jimmy" timestamp="1532410502327"><title>方法区</title><children><topics type="attached"><topic id="37tdi1c0376flucdj68aee9hhh" modified-by="jimmy" timestamp="1532410540272"><title>被加载的类信息, 常量, 静态变量</title></topic></topics></children></topic><topic id="1qkbnr5hji7gse5ik3l7jq7u48" modified-by="SYSTEM" timestamp="1531105675625"><title>运行是常量池</title></topic></topics></children></topic><topic id="0c838k59lt3uci7e6fmo2uv8om" modified-by="SYSTEM" timestamp="1531107138281"><title>垃圾收集</title><children><topics type="attached"><topic id="7j0v3mhjicmrucu2pkq48qdsg3" modified-by="SYSTEM" timestamp="1531105800825"><title>判断对象存活</title><children><topics type="attached"><topic id="48t2ohtq242vhug6ij7vg2nvgf" modified-by="jimmy" timestamp="1532410591839"><title>引用计数算法</title><children><topics type="attached"><topic id="2mg4fli9e7oa4gmbiq3qhrfl62" modified-by="jimmy" timestamp="1532410624478"><title>被引用计数加1,引用失效计数减1</title></topic></topics></children></topic><topic id="0nq5g273j7m62kg2i4peg5d8pe" modified-by="jimmy" timestamp="1532410833412"><title>可达性分析算法</title><children><topics type="attached"><topic id="48nfbfisos08gftvikdkmr4mbr" modified-by="jimmy" timestamp="1532410706590"><title svg:width="500">GC Roots作为起始点,可达的是存活的,不可达的可被回收</title></topic><topic id="5a6q238f404lf6om8cvpm44rdt" modified-by="jimmy" timestamp="1532410785419"><title svg:width="500">GC Roots包含虚拟机栈/本地方法栈/方法区静态属性/方法区常量的对象引用</title></topic><topic id="7evj9i8u5vs4s7jld8sh8m01jv" modified-by="jimmy" timestamp="1532410848320"><title>强引用</title><children><topics type="attached"><topic id="6afliqgnehapcndl70ecbbghtk" modified-by="jimmy" timestamp="1532410883932"><title>通过new的对象, 不会被回收</title></topic></topics></children></topic><topic id="7fafnv2l2qv9htadhlulutgp2e" modified-by="jimmy" timestamp="1532410892746"><title>软引用</title><children><topics type="attached"><topic id="1bhuvmitu9vmhk6tqq21q2rm02" modified-by="jimmy" timestamp="1532410929665"><title>SoftReference类创建的引用, 内存不够会被回收</title></topic></topics></children></topic><topic id="144hr6dhqiiuvs2pdr7qvrbk9l" modified-by="jimmy" timestamp="1532410946830"><title>弱引用</title><children><topics type="attached"><topic id="0unkjvgrqtpce6qcnqj60vgpeu" modified-by="jimmy" timestamp="1532410964770"><title>WeakReference类创建的引用, 一定会被回收</title></topic></topics></children></topic><topic id="6if75rjjm3qflu22ql32b9l975" modified-by="jimmy" timestamp="1532410995515"><title>虚引用</title><children><topics type="attached"><topic id="15u41t5ua8midqd4947tmdeti3" modified-by="jimmy" timestamp="1532411010883"><title>PhantomReference类创建的引用</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="7pptcrdutm11ul0kqu0qmuhkq9" modified-by="SYSTEM" timestamp="1531106320284"><title>垃圾收集算法</title><children><topics type="attached"><topic id="4jopecdu5a5ivru42ifq7ovvbm" modified-by="jimmy" timestamp="1532411047757"><title>标记-清除</title><children><topics type="attached"><topic id="6og1gte2t3f1cnoa8bqd2lhp33" modified-by="jimmy" timestamp="1532411069351"><title>存活的标记, 清楚未被标记的对象</title></topic></topics></children></topic><topic id="0jh0nurq8jo7qmshfshf2v05mn" modified-by="jimmy" timestamp="1532411091495"><title>标记-整理</title><children><topics type="attached"><topic id="569u1onmd7f3d843v4askrap30" modified-by="jimmy" timestamp="1532411114026"><title>存活的移动到一端, 清理末尾的对象</title></topic></topics></children></topic><topic id="12h86h7gg0g2epknt173bmrfms" modified-by="jimmy" timestamp="1532411125491"><title>复制</title><children><topics type="attached"><topic id="0b3tnccakb9gsq1rle7as6jmjg" modified-by="jimmy" timestamp="1532411157067"><title>内存分为两部分, 使用的一部分存活的复制到未使用的一部分</title></topic></topics></children></topic><topic id="6h5j1e72tlj8uhlrohad4cii2d" modified-by="jimmy" timestamp="1532411184952"><title>分代收集</title><children><topics type="attached"><topic id="4gl8iiule6d3k1j40shuiidc58" modified-by="jimmy" timestamp="1532411184428"><title>新生代-复制算法</title></topic><topic id="3hiad2862od8jsn06e66lke78d" modified-by="jimmy" timestamp="1532411213814"><title>老年代-标记清除或标记整理</title></topic></topics></children></topic></topics></children></topic><topic id="7c53satnajv599f6b2ghl7kkkg" modified-by="SYSTEM" timestamp="1531106522108"><title>垃圾收集器</title><children><topics type="attached"><topic id="6q8lceij45e5f1crcm47scvpfg" modified-by="SYSTEM" timestamp="1531106533447"><title>serial</title><children><topics type="attached"><topic id="0flbaa5tb8qb630hh8d711n4qm" modified-by="SYSTEM" timestamp="1531106558030"><title>串行执行, 单线程效率高</title></topic></topics></children></topic><topic id="07l6v1j6lsbcfh459vbnd5eieo" modified-by="SYSTEM" timestamp="1531106639280"><title>parNew</title><children><topics type="attached"><topic id="6f7tkrvfe3tsk0760poagjqcpf" modified-by="SYSTEM" timestamp="1531106796076"><title>serial多线程版, 能与CMS配合使用</title></topic></topics></children></topic><topic id="6kaa13kt11ddr2lij9ljlfam16" modified-by="SYSTEM" timestamp="1531106860512"><title>parallel scavenge</title></topic><topic id="2j34n2cjos8tupt33af5epuakt" modified-by="SYSTEM" timestamp="1531106889511"><title>serial Old</title></topic><topic id="2f0tt4qrmud0tp2go78ocqlbqp" modified-by="SYSTEM" timestamp="1531106899307"><title>parallel Old</title></topic><topic id="5kolp48topoc40rnpvu1ju0alv" modified-by="jimmy" timestamp="1532411320582"><title>CMS(Concurrent Mark Sweep)</title><children><topics type="attached"><topic id="3l8ibe6j8o0lmhid2f84j8ku7f" modified-by="jimmy" timestamp="1532411355079"><title>并发收集,低停顿</title></topic><topic id="27nu3v8249d2sblqgtbe5i4eob" modified-by="jimmy" timestamp="1532411337316"><title>使用标记-清楚算法</title></topic></topics></children></topic><topic id="1dmthlmgosemokk5n87jj9mhvq" modified-by="SYSTEM" timestamp="1531106580013"><title>G1</title><children><topics type="attached"><topic id="5bhrj0afku48ldle5m27n69sui" modified-by="jimmy" timestamp="1532411417067"><title>可以对新生代/老年代一起回收</title></topic></topics></children></topic></topics></children></topic><topic id="0gqp4qhnvfnolgcebuc35eioo0" modified-by="jimmy" timestamp="1532411599715"><title>对象分配</title><children><topics type="attached"><topic id="5tv9qr9qp71qnj02308srmnijs" modified-by="jimmy" timestamp="1532411538052"><title>新生对象优先新生代, Eden区不足发起MinorGC</title></topic><topic id="5lm12qrmv91726c1up3if099s8" modified-by="SYSTEM" timestamp="1531107214854"><title>大对象-老年代</title></topic><topic id="4qrsotdbl758rpvdocg8odgevs" modified-by="SYSTEM" timestamp="1531107247063"><title>长期存活对象老年代</title></topic><topic id="1npne017hupvl1ll5gdtaf637u" modified-by="SYSTEM" timestamp="1531107365554"><title>对象动态年龄判定</title></topic><topic id="3h8u80q0lkgjvmkpr892tcvbim" modified-by="jimmy" timestamp="1532411612347"><title>空间分配担保</title><children><topics type="attached"><topic id="2im5dtq6biimmbaoqhblks3iek" modified-by="jimmy" timestamp="1532411700022"><title svg:width="500">老年代空间足,MinorGC就是安全的,不足担保失败就会发起FullGC</title></topic></topics></children></topic></topics></children></topic><topic id="0bj5reg5fav3lddakkvqa575cq" modified-by="SYSTEM" timestamp="1531107371281"><title>回收策略</title><children><topics type="attached"><topic id="7raoe2peucdr90i4thep27821s" modified-by="jimmy" timestamp="1532411590882"><title>Mirror Gc, Eden区不足时发起</title></topic><topic id="5g0fpq4975bhpab0ae0jjtfvhd" modified-by="SYSTEM" timestamp="1531107990946"><title>Full Gc</title><children><topics type="attached"><topic id="3ua1tma4k321lldn4o21ic8bnk" modified-by="SYSTEM" timestamp="1531108003953"><title>System.gc();</title></topic><topic id="0d9fcjrti2nqumho9rv95t3c9f" modified-by="SYSTEM" timestamp="1531108139809"><title>老年代满了,大对象和数组</title></topic><topic id="51tssbv54njeodb8rmvnuijq7s" modified-by="SYSTEM" timestamp="1531108039694"><title>mirror Gc担保失败</title></topic><topic id="19dnjog8d70kg1ui1sik0f72u4" modified-by="SYSTEM" timestamp="1531108114452"><title>Concurrent Mode Fail</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="6nqhugndvblus5615skqcnchlj" modified-by="jimmy" timestamp="1532409589942"><title>类加载</title><children><topics type="attached"><topic id="5gtbk0v8mpl3v77jm4dgbuo85e" modified-by="jimmy" timestamp="1532412133605"><title>类加载过程</title><children><topics type="attached"><topic id="66fl8s06p8purmcm20i25a826q" modified-by="jimmy" timestamp="1532411761103"><title>加载</title><children><topics type="attached"><topic id="7k39ul8ogcb0hq19i4v85v8arf" modified-by="jimmy" timestamp="1532411959597"><title svg:width="500">获取类的二进制字节流, jar/war包, 运行时动态代理, JSP文件获取</title></topic><topic id="32aib4b3s3qg9butimbgvi1j6u" modified-by="jimmy" timestamp="1532411825145"><title>将静态存储结构转化为方法区的运行时存储结构</title></topic><topic id="3qj05p6lpp4qcm68atmd4fsla0" modified-by="jimmy" timestamp="1532411873739"><title>在内存中生成Class对象,作为方法区中类的访问入口</title></topic></topics></children></topic><topic id="6e8a3vqldsgokd8e36sqk69ccj" modified-by="jimmy" timestamp="1532411999441"><title>验证</title><children><topics type="attached"><topic id="6g7uoih2njb51hmglcn13l3m79" modified-by="jimmy" timestamp="1532412034638"><title>文件格式, 元数据, 字节码, 符号引用</title></topic></topics></children></topic><topic id="5narr8iatc8d7pt3ugs5ekor3d" modified-by="jimmy" timestamp="1532412078955"><title>准备</title><children><topics type="attached"><topic id="1bpg66q9rkb8iibemo7vl8k73p" modified-by="jimmy" timestamp="1532412076574"><title>Static分配内存并初始化</title></topic><topic id="3ct3s85op76t4fq1mudhl01cqn" modified-by="jimmy" timestamp="1532412120401"><title>实例变量不分配内存,初始化为0</title></topic></topics></children></topic><topic id="3hkc5j8r7mk9rdudmsrde6hkf9" modified-by="jimmy" timestamp="1532412134311"><title>解析</title><children><topics type="attached"><topic id="70kkmq0vj5qenreaiaucifdaf9" modified-by="jimmy" timestamp="1532412149193"><title>将常量池的符号引用替换为直接引用</title></topic></topics></children></topic><topic id="6i5plririohjla4u7fpkj4g2nj" modified-by="jimmy" timestamp="1532412220127"><title>初始化</title><children><topics type="attached"><topic id="70htg598gg74qcrmnjfcdtfkem" modified-by="jimmy" timestamp="1532412234181"><title>虚拟机执行构造方法的过程</title></topic></topics></children></topic><topic id="5t987s2ph5t8aqgdd6fls9e8g9" modified-by="jimmy" timestamp="1532409585767"><title>使用</title></topic><topic id="414dk0pudu6r1mgd6jic25mh4a" modified-by="jimmy" timestamp="1532409589942"><title>卸载</title></topic></topics></children></topic><topic id="2a8hombiteqpv0uc8d85060dsg" modified-by="jimmy" timestamp="1532409665330"><title>类加载器</title><children><topics type="attached"><topic id="1066bkhlhqaotqop7i0gjg55h7" modified-by="jimmy" timestamp="1532409817179"><title>启动类加载器</title><children><topics type="attached"><topic id="7cf5imh6bv9gnqs70ea67c2q6r" modified-by="jimmy" timestamp="1532409816048"><title>加载被虚拟机识别的存放再lib或Xbootclasspath指定的</title></topic><topic id="3ps9l7nepaoqs9l093gls8vmhq" modified-by="jimmy" timestamp="1532409841206"><title>BootstrapClassLoader</title></topic></topics></children></topic><topic id="0cglddo3pp0ifuff9kg6nckm4a" modified-by="jimmy" timestamp="1532409870972"><title>扩张类加载器</title><children><topics type="attached"><topic id="3g7qgnl68o5eaq4aaq9jbm6s09" modified-by="jimmy" timestamp="1532409870133"><title>ExtClassLoader</title></topic><topic id="4s01tkuf0d04g117ki2eiqadoa" modified-by="jimmy" timestamp="1532409899085"><title>加载lib/ext下的类库</title></topic></topics></children></topic><topic id="2fs09lcm8mekteiluvs7prff5t" modified-by="jimmy" timestamp="1532409914642"><title>应用程序类加载器</title><children><topics type="attached"><topic id="7r4g25iefou58ond54s02v2pj2" modified-by="jimmy" timestamp="1532409914334"><title>AppClassLoader</title></topic><topic id="4vbnmioqtkm17rh9nblnvha1kb" modified-by="jimmy" timestamp="1532409945553"><title>加载用户路径classpath的类库</title></topic></topics></children></topic><topic id="1f4meqek15rto46f5cbbo2u6r2" modified-by="jimmy" timestamp="1532410097430"><title>双亲委派模型</title><children><topics type="attached"><topic id="4g755qg1jffndblrdhkms2fgqq" modified-by="jimmy" timestamp="1532410035401"><title>加载类时先委派父类加载器,父类无法加载时才尝试加载</title></topic><topic id="7ganjadr7bk3nfpkc067hclb46" modified-by="jimmy" timestamp="1532410174606"><title svg:width="500">例如定义了一个Object方法, 会首先使用启动类加载器&#13;
所以所有的Object类都是rt.jar下的Object</title></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>-1</right-number></content></extension></extensions></topic><title>画布 1</title></sheet></xmap-revision-content>