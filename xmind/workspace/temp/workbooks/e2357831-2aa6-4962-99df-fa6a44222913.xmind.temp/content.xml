<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-content xmlns="urn:xmind:xmap:xmlns:content:2.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" modified-by="jimmy" timestamp="1532191347454" version="2.0"><sheet id="4n1t0ambvqun0s3ip7cbpori7u" modified-by="jimmy" theme="3il131gbm55dhldk7j532bk7gv" timestamp="1532191347454"><topic id="4bukrfcposj4mqvqdq6qc51uj3" modified-by="jimmy" structure-class="org.xmind.ui.logic.right" timestamp="1532191046726"><title>Java 并发</title><children><topics type="attached"><topic id="76j7b1ke2nnbkouj3atctab98m" modified-by="SYSTEM" timestamp="1531133936851"><title>线程状态转换</title><children><topics type="attached"><topic id="2rat4t78kmub4ppu58mhf74jqj" modified-by="SYSTEM" timestamp="1531133936851"><title>新建</title></topic><topic id="30jagdotl8cjeqav6g98dt5ada" modified-by="SYSTEM" timestamp="1531133936851"><title>可运行</title></topic><topic id="17f6nqh6t73s09aqi2q9akdr8p" modified-by="SYSTEM" timestamp="1531133936851"><title>等待 主动调用sleep();Wait()</title></topic><topic id="1ih9kmq3qhn71io8hgclirvtpa" modified-by="SYSTEM" timestamp="1531133936851"><title>阻塞 被动等待锁</title></topic><topic id="1b2100ib15pafv24g8s7sug0nq" modified-by="SYSTEM" timestamp="1531133936851"><title>死亡</title></topic></topics></children></topic><topic id="7lho2tab6p6e76da90r0ru2trg" modified-by="SYSTEM" timestamp="1531133944037"><title>使用线程</title><children><topics type="attached"><topic id="17vsj862sflt9q8h5cqkap8h65" modified-by="SYSTEM" timestamp="1531133957767"><title>继承Thread</title></topic><topic id="2h6gt0lm1d16umm8968m8jge08" modified-by="SYSTEM" timestamp="1531133968124"><title>实现Runnable</title></topic><topic id="2s8vlkkc2l38168hu2msv5rdmm" modified-by="SYSTEM" timestamp="1531133976551"><title>实现Callable</title></topic></topics></children></topic><topic id="7u3n6v7rusjpn7qmo8vkkbs97k" modified-by="SYSTEM" timestamp="1531192426476"><title>线程机制</title><children><topics type="attached"><topic id="3rj169e9kqfveh8s9ev9pam405" modified-by="SYSTEM" timestamp="1531193687399"><title>线程池 Executor</title></topic><topic id="0jjo167setlcenrnaejeks64nj" modified-by="SYSTEM" timestamp="1531191976358"><title>守护线程 deamon</title></topic><topic id="77q6ibgv93m05plq81jtf9gt8b" modified-by="SYSTEM" timestamp="1531192424288"><title>sleep();</title></topic><topic id="5dlsk1076i8ndf5um9f6e42fbs" modified-by="SYSTEM" timestamp="1531192453039"><title>yield();</title></topic></topics></children></topic><topic id="6m1eub5uvo4d84n2350t9oauif" modified-by="SYSTEM" timestamp="1531193762505"><title>中断</title><children><topics type="attached"><topic id="4octlfgicfqtjidoekjvt244d8" modified-by="jimmy" timestamp="1532164022560"><title>interrupt()和interrupted();</title><children><topics type="attached"><topic id="75ncc0r24tjerlcu5kqgbt9g0h" modified-by="jimmy" timestamp="1532164002429"><title>不能中断I/O阻塞, synchronized锁阻塞</title></topic><topic id="5rlk6uj9ld1o5ksrj8toicvscp" modified-by="jimmy" timestamp="1532164075929"><title>等待或者阻塞调用会抛出InterruptedException异常</title></topic></topics></children></topic><topic id="03gfkr58i0pandeckrulhgrmc0" modified-by="SYSTEM" timestamp="1531193693230"><title>Executor.shutdown();</title></topic><topic id="7k1p07u368ppcr9ejc4q8mkonr" modified-by="SYSTEM" timestamp="1531193761379"><title>Executor.submit()返回Future对象,调用cancel();</title></topic></topics></children></topic><topic id="05kscpngq8sd5vk7m836k7jg78" modified-by="SYSTEM" timestamp="1531194346446"><title>互斥同步</title><children><topics type="attached"><topic id="6mucemutivs6vfpdbka1j8fckq" modified-by="jimmy" timestamp="1532188300403"><title>Synchronize</title><children><topics type="attached"><topic id="72sdppda79ode1mp4dep7bcufn" modified-by="jimmy" timestamp="1532188299277"><title>JVM实现</title></topic><topic id="33to4b2cu40ke89q90bid3tgm2" modified-by="jimmy" timestamp="1532188304620"><title>,做了许多优化,优先选择synchronized</title></topic></topics></children></topic><topic id="3su1bi8chcc95t6pba2l8n031t" modified-by="jimmy" timestamp="1532188294596"><title>RetrantLock</title><children><topics type="attached"><topic id="499g682u4viit0qfcicu0tf360" modified-by="jimmy" timestamp="1532188177582"><title>JDK实现</title></topic><topic id="6u714vmpkn1n9v2snsrub5lc5h" modified-by="jimmy" timestamp="1532188228116"><title>可实现等待中断, 公平锁, 绑定多个条件</title></topic></topics></children></topic></topics></children></topic><topic id="41d37n7iqhtt97nvnl0ggaode2" modified-by="SYSTEM" timestamp="1531194600193"><title>线程协作</title><children><topics type="attached"><topic id="3ei1rna16je1s8bi0tafogvd2n" modified-by="jimmy" timestamp="1532188365098"><title>join();</title><children><topics type="attached"><topic id="4liveqau5rq9t7up31ieqkvj72" modified-by="jimmy" timestamp="1532188395514"><title>将当前线程挂起, 直至目标线程结束</title></topic></topics></children></topic><topic id="0eplvoolipu5nq53ef3q5svar8" modified-by="jimmy" timestamp="1532188442148"><title>wait();notify();</title><children><topics type="attached"><topic id="29623o9eab2qo1q37ghvevej0n" modified-by="jimmy" timestamp="1532188484859"><title>将等待的线程挂起, 唤醒</title></topic></topics></children></topic><topic id="06l4cmts7d9ut5lsg93ns3pdho" modified-by="jimmy" timestamp="1532188603295"><title>await();signal();</title><children><topics type="attached"><topic id="0k372c3vgl54ji9ictm67g8s30" modified-by="jimmy" timestamp="1532188550220"><title>concurrent包下的Condition类提供</title></topic></topics></children></topic></topics></children></topic><topic id="5lgvgn4ecnas38i8nmiu26rd6v" modified-by="SYSTEM" timestamp="1531234046046"><title>J.U.C-AQS</title><children><topics type="attached"><topic id="43em6a0m230bn94buuoj31em4s" modified-by="jimmy" timestamp="1532188630245"><title>AbstractQueuedSynchronizer</title><children><topics type="attached"><topic id="0etlr3aqibo2708eto2bvlmbk4" modified-by="jimmy" timestamp="1532188666590"><title>AQS是JUC的核心</title></topic></topics></children></topic><topic id="15bgrmtdggv1qpass5e07gs6n7" modified-by="jimmy" timestamp="1532188887169"><title>CountDownLatch.await()</title><children><topics type="attached"><topic id="12qt087mbs633b6otg2occ88pr" modified-by="jimmy" timestamp="1532188702133"><title>控制线程等待多个线程</title></topic></topics></children></topic><topic id="6jrmhbsp4gh1k36l5vc4h68lut" modified-by="jimmy" timestamp="1532188896031"><title>CyclicBarrier.await()</title><children><topics type="attached"><topic id="4tn4vlvga05em45ivegaanrld7" modified-by="jimmy" timestamp="1532188699444"><title>控制线程等待,可循环</title></topic></topics></children></topic><topic id="1kr3607id034koq8eeedfkv86c" modified-by="jimmy" timestamp="1532188913425"><title>semaphore.acquire()</title><children><topics type="attached"><topic id="5tgch247gqp2g8gnh5dg93h1tm" modified-by="jimmy" timestamp="1532188872100"><title>控制互斥资源的线程访问数</title></topic></topics></children></topic><topic id="74f2dfvhit14mdmg791s4927mf" modified-by="jimmy" timestamp="1532188936104"><title>futureTask</title><children><topics type="attached"><topic id="2nhelqv0pm5vs7ignqlsio0gpr" modified-by="jimmy" timestamp="1532188934513"><title>获取线程执行结果或取消执行</title></topic><topic id="6d4s6p2bc975a8868j2vmj72u2" modified-by="jimmy" timestamp="1532189017634"><title svg:width="500">实现Callable接口返回值, 或者Executor.submit()返回值</title></topic></topics></children></topic><topic id="6qm93mh3nnbetgka8k620uslnk" modified-by="jimmy" timestamp="1532189037567"><title>BlockingQueue</title><children><topics type="attached"><topic id="38l7ac59e1p8r5f8q55gtlfuo2" modified-by="jimmy" timestamp="1532189035796"><title>实现阻塞队列</title></topic><topic id="1icu7n7vlpbgp65l1a7ceb3tu1" modified-by="jimmy" timestamp="1532189100176"><title svg:width="500">LinkedBlockingQueue,ArrayBlockingQueue, PriorityBlockingQueue</title></topic></topics></children></topic></topics></children></topic><topic id="22cs3dh9kufj24os7ca2g06es4" modified-by="jimmy" timestamp="1532190085084"><title>Java内存模型</title><children><topics type="attached"><topic id="59utsj4dtm4nseplr6b979dsgf" modified-by="SYSTEM" timestamp="1531234582618"><title>Thread 执行获取结果</title></topic><topic id="696ucoj1a2rde0o5mdpko89ft3" modified-by="SYSTEM" timestamp="1531234600703"><title>工作内存 保存变量副本</title></topic><topic id="0nka89100qavmq6lf5b09ctidd" modified-by="SYSTEM" timestamp="1531234669294"><title>主内存 保存变量和变量值传递</title></topic><topic id="0mmhvkggqb08sd5n9t8e2g4bgd" modified-by="jimmy" timestamp="1532189874117"><title>原子性</title><children><topics type="attached"><topic id="2tqd1bs4qmu9g8pqcm4hvjikve" modified-by="jimmy" timestamp="1532189858089"><title>要么执行, 要么不执行,操作不可中断</title></topic><topic id="31a1snkhla261429575ma6fpnh" modified-by="jimmy" timestamp="1532189874112"><title>AtomicInteger, synchronize保证原子性</title></topic></topics></children></topic><topic id="7o45eojbbm52vm4vsd0laupe9s" modified-by="jimmy" timestamp="1532190025568"><title> 可见性 </title><children><topics type="attached"><topic id="0lfk9vq967q66rjkkb1j4jus4d" modified-by="jimmy" timestamp="1532189918372"><title>一个线程对共享变量的修改可被其他线程知道</title></topic><topic id="1qp3gr037m9n9mo66lh5vis1rv" modified-by="jimmy" timestamp="1532190019481"><title>volatile, synchronize, final可保证可见性</title></topic></topics></children></topic><topic id="5s1jjrovu5l3g363gne5hekgen" modified-by="jimmy" timestamp="1532190029947"><title> 有序性</title><children><topics type="attached"><topic id="4d0gei59fslvggenpudu1ps9lg" modified-by="jimmy" timestamp="1532190008798"><title>线程内的操作都是有序的, 不会发生指令重排</title></topic><topic id="3dncb1tcosvj8vue9n2oqeaa23" modified-by="jimmy" timestamp="1532190059022"><title>volatile, synchronize, 可保证有序性</title></topic></topics></children></topic></topics></children></topic><topic id="6c0ngjuhvudreb8p6km04fpnol" modified-by="jimmy" timestamp="1532190133787"><title>线程安全性</title><children><topics type="attached"><topic id="5klps8ne4mvs7h27f8ia9v7m9u" modified-by="SYSTEM" timestamp="1531235165134"><title>不可变 绝对安全 相对安全</title></topic></topics></children></topic><topic id="555q7aa83gmb9qqp3lpf6djd1d" modified-by="jimmy" timestamp="1532190493138"><title>线程安全实现方法</title><children><topics type="attached"><topic id="04qh536ud1opbl5ghtn2a55rfh" modified-by="jimmy" timestamp="1532190371348"><title svg:width="500">阻塞同步</title><children><topics type="attached"><topic id="7m22032jknfklcv3cop4frfnnk" modified-by="jimmy" timestamp="1532190371326"><title>悲观并发策略synchronize和reentrantLock</title></topic></topics></children></topic><topic id="722gjrg2aob0pcrmhlkgo2jk5u" modified-by="jimmy" timestamp="1532190430405"><title svg:width="500">非阻塞同步</title><children><topics type="attached"><topic id="2stroidifq4p1lmg348916u7k0" modified-by="jimmy" timestamp="1532190405287"><title>乐观并发策略 先操作和冲突检测, 补偿方法一般为重试</title></topic><topic id="1c23scfvegkjk963afnvtelp9u" modified-by="jimmy" timestamp="1532190398732"><title>atomicInteger 使用了Unsafe类的CAS操作</title></topic><topic id="046ttp90lr6riaq8kai5i0brsu" modified-by="jimmy" timestamp="1532190400602"><title>CAS存在ABA问题, 可以使用版本来进行检测</title></topic><topic id="6gcjr8t84jqpo8iv4mb0c01coa" modified-by="jimmy" timestamp="1532190403387"><title>CAS来保证操作和冲突检测的原子性</title></topic></topics></children></topic><topic id="14p7uno6dgh417ncccpp83fbpr" modified-by="jimmy" timestamp="1532190489869"><title>无同步方案</title><children><topics type="attached"><topic id="1jcgeaot7cloceps55io8kpc70" modified-by="jimmy" timestamp="1532190641572"><title svg:width="500">可重入代码ReentrantCode 如递归可中断执行代码而且去执行另一段代码, 控制权返回后原来的程序不会出现错误</title></topic><topic id="70cb1v45k6m2c531r7nertth1k" modified-by="jimmy" timestamp="1532190538729"><title>栈封闭 只使用局部变量,属于线程私有</title></topic><topic id="1dkft2s6vdd0ac8bcl8uvnmdak" modified-by="jimmy" timestamp="1532190740774"><title svg:width="500">线程本地存储ThreadLocal 保证共享数据在同一线程中执行</title></topic></topics></children></topic></topics></children></topic><topic id="75go8r333kp7fvltnoavcoud44" modified-by="jimmy" timestamp="1532190871473"><title>锁优化</title><children><topics type="attached"><topic id="632g284aaqum892olkcg65obog" modified-by="SYSTEM" timestamp="1531236079496"><title>自旋锁 线程在获取锁的期间执行自循环直至获取锁</title></topic><topic id="1f74aaoopkfagaa7nmlufjsmtp" modified-by="SYSTEM" timestamp="1531236244373"><title svg:width="500">锁消除 主内存的数据不可能被其他线程访问到, String的+操作会处理成StringBuild的append()操作</title></topic><topic id="4f7k9grlltdqril5a6heon4rno" modified-by="jimmy" timestamp="1532190426242"><title>锁粗化 一系列操作都对同一个对象加锁和解锁</title></topic><topic id="5vjgeiovh7m9fsfjcko65vasfu" modified-by="jimmy" timestamp="1532190867173"><title>无锁</title></topic><topic id="780lfj9qqjonvc2mc3t3lqv1n6" modified-by="jimmy" timestamp="1532191027665"><title>偏向锁 第一个获取锁的线程之后不需要获取该锁</title></topic><topic id="3heb4k7r8l4u8dcd0g2j0i3dfg" modified-by="jimmy" timestamp="1532190933438"><title>轻量级锁 CAS进行同步, 失败转互斥锁</title></topic><topic id="6r55fiu509btrcd5emp5f205cn" modified-by="jimmy" timestamp="1532190939684"><title>重量级锁 互斥锁</title></topic></topics></children></topic><topic id="6s6ch3p9fp358trbphmhdfkis0" modified-by="jimmy" timestamp="1532191318246"><title>实践</title><children><topics type="attached"><topic id="5uff7jcsmkcdb3nkd41tljlm0t" modified-by="jimmy" timestamp="1532191088082"><title>给线程一个有意义的名字, 方便找bug</title></topic><topic id="0e4ol07oo7qt3ilrjces3bku7l" modified-by="jimmy" timestamp="1532191109232"><title>缩小同步的范围</title></topic><topic id="5hn6vccjvorg37dm0fmtqnaolo" modified-by="jimmy" timestamp="1532191191920"><title svg:width="500">多用同步类CountDownLatch, CyclicBarrier, Semaphore, 少用wait()notify();</title></topic><topic id="2coctlp2j9cum78asp4m1a3r73" modified-by="jimmy" timestamp="1532191257685"><title svg:width="500">多用并发集合少用同步集合, 使用ConcurrentHashMap而不是HashTable</title></topic><topic id="75p8j75gjdrrdkat7bnhnuhutf" modified-by="jimmy" timestamp="1532191282268"><title>使用本地变量和不可变类保证线程安全</title></topic><topic id="6afss312vdvkk5o6m59ck05c4l" modified-by="jimmy" timestamp="1532191313250"><title>使用线程池而不是创建Thread对象</title></topic><topic id="5h7rquqdotff03pj0ctmthmlg1" modified-by="jimmy" timestamp="1532191347454"><title>使用BlockingQueue实现生产者消费者问题</title></topic></topics></children></topic></topics></children></topic><title>画布 1</title></sheet></xmap-content>